using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Collections;

namespace WindowsFormsApplication1
{
    /// <summary>
    /// 
    /// </summary>
    public partial class Form1 : Form
    {
        /// <summary>
        /// This is the hash table that the dictionary words will be stored.
        /// </summary>
        Hashtable targethashTable;

        /// <summary>
        /// This is the hash table which the nonordered words will be stored.
        /// </summary>
        Hashtable nonorderedhashTable;

        /// <summary>
        /// This is the name of the dictionary  file.
        /// </summary>
        string filename;
        /// <summary>
        /// This is the name of the nonordered file.
        /// </summary>
        string filename2;
        /// <summary>
        /// This array will store all lines of the dictionary file.
        /// </summary>
        string[] target;
        OpenFileDialog ofd = new OpenFileDialog();

        /// <summary>
        /// This linked list will store only the output lines we want from dictionary file.
        /// </summary>
        List<string> targetlist = new List<string>();
        /// <summary>
        /// This list will store only the output lines we want from nonordered file.
        /// </summary>
        List<string> nonorderedlist = new List<string>();
        /// <summary>
        /// This linked list will store the ordered results that are included in dictionary file from nonordered list. 
        /// </summary>
        List<string> orderedlist = new List<string>();
        /// <summary>
        /// This will list the nonordered outputs which are not included in dictionary file.
        /// </summary>
        List<string> lastlist = new List<string>();


        public Form1()
        {
            InitializeComponent();
        }

        /// <summary>
        /// This button will take the name of the dictionary file.
        /// </summary>
        /// <param name="sender">button</param>
        /// <param name="e">event arguments</param>
        public void button1_Click_1(object sender, EventArgs e)
        {
            
            ofd.Title = "Open Text";
            ofd.Filter = "C File |*.c|t55 File |*.t55";
            if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                filename = ofd.FileName;
                textBox1.Text = filename;

              
            }
        }
        /// <summary>
        /// This will store all the lines that belongs to nonordered file.
        /// </summary>
        string[] nonordered;
        OpenFileDialog ofd2 = new OpenFileDialog();

        /// <summary>
        /// This button will take the name of the nonordered file.
        /// </summary>
        /// <param name="sender">button</param>
        /// <param name="e">event arguments</param>
        public void button2_Click(object sender, EventArgs e)
        {

            ofd2.Title = "Open Text";
            ofd2.Filter = "C File |*.c|t55 File |*.t55";
            if (ofd2.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                filename2 = ofd2.FileName;
                textBox2.Text = filename2;
              
            }
        }


        /// <summary>
        /// This will allow us to enter the loop after seeing the begining of the dictionary.
        /// </summary>
        bool condition = false;
        /// <summary>
        /// This will allow us to enter the loop after seeing the begining of the section.
        /// </summary>
        bool condition2 = false;

        /// <summary>
        /// This button will compare the titles we want to compare and order the nonordered file.
        /// </summary>
        /// <param name="sender">button</param>
        /// <param name="e">event arguments</param>
        private void button3_Click(object sender, EventArgs e)
        {
            

            if (!File.Exists(textBox1.Text) || !File.Exists(textBox2.Text))
            {
                MessageBox.Show("You need to select two files to go!!!");
            }

            if (File.Exists(textBox1.Text) && File.Exists(textBox2.Text))
            {

                StreamReader sr = new StreamReader(File.OpenRead(filename));               
                target = File.ReadAllLines(filename);
                sr.Dispose();

                StreamReader sr2 = new StreamReader(File.OpenRead(filename2));
                nonordered = File.ReadAllLines(filename2);
                sr2.Dispose();


                MessageBox.Show("There we go");
            }

            if (File.Exists(textBox1.Text) && File.Exists(textBox2.Text))
            {

                foreach (string line in target) ////ASSIGN THE  OUTPUTS OF DICTIONARY TO ARRAY
                {
                    if (line.Contains("Data_Dictionary */"))
                    {                                             
                        break;
                    }
                    

                    if ((line.Contains("Data_Dictionary_v1.0")) || condition)
                    {
                        condition = true;

                        if (line.Contains("SECTION") || condition2)
                        { 
                            condition2 = true;
                            if (line == "") continue;
                            if (line.Contains("SECTION")) continue;
                            targetlist.Add(line);
                            
                        }

                    }
                }
            }

                
                
            condition = false;
            condition2 = false;

            if (File.Exists(textBox1.Text) && File.Exists(textBox2.Text))
            {
                foreach (string line in nonordered) ////ASSIGN THE  OUTPUTS OF NONORDERED FILE TO ARRAY
                {
                    if (line.Contains("Data_Dictionary */"))
                    {                      
                        break;
                    }

                    if ((line.Contains("Data_Dictionary_v1.0") ) || condition)
                    {
                        condition = true;
                        if (line.Contains("SECTION") || condition2)
                        {
                            condition2 = true;
                            if (line == "") continue;
                            if (line.Contains("SECTION")) continue;
                            nonorderedlist.Add(line);

                        }

                    }
                }

            }

         

            targethashTable = new Hashtable();
            nonorderedhashTable = new Hashtable();

            for (int j = 0; j < targetlist.Count; j++)//SAVES THE TITLES OF DICTIONARY INFORMATION TO HASH TABLE
            {

                string s = targetlist[j];
                int endOfName = s.IndexOf(';');
                string name = s.Substring(0, endOfName);
                name = name.Trim();

                
                targethashTable.Add(name,targetlist[j]);
            }

            for (int j = 0; j < nonorderedlist.Count; j++)//SAVES THE TITLES OF NONORDERED INFORMATION TO HASH TABLE
            {

                string s = nonorderedlist[j];
                int endOfName = s.IndexOf(';');
                string name = s.Substring(0, endOfName);
                name = name.Trim();

                
                nonorderedhashTable.Add(name,nonorderedlist[j]);
            }

            for (int j = 0; j < targetlist.Count; j++)//SAVES THE THE ORDERED OUTPUTS WHICH ARE INCLUDED IN DICTIONARY
            {
                string name;
                int endOfName;

                string s = targetlist[j];
                endOfName = s.IndexOf(';');
                name = s.Substring(0, endOfName);
                name = name.Trim();

                                
                    if (nonorderedhashTable.ContainsKey(name))
                    {
                        orderedlist.Add((string)nonorderedhashTable[name]);
                    }
                

            }

            for (int j = 0; j < nonorderedlist.Count; j++)//SAVES THE NONORDERED OUTPUTS THAT ARE NOT INCLUDED IN DICTIONARY 
            {
                string name2;
                int endOfName;

                string s2 = nonorderedlist[j];
                endOfName = s2.IndexOf(';');
                name2 = s2.Substring(0, endOfName);
                name2 = name2.Trim();

                
                if (!targethashTable.ContainsKey(name2))
                {
                    lastlist.Add((string)nonorderedhashTable[name2]);
                }
          
            }

            orderedlist.AddRange(lastlist);//JOIN THE NONORDERED FILE OUTPUTS THAT ARE NOT IN DICTIONARY TO THE LAST OF THE ORDERED LIST

            System.IO.StreamWriter file = new System.IO.StreamWriter("C:\\Users\\jj7g9q\\Desktop\\orderedlist.txt");

            foreach (string line in orderedlist)
                file.WriteLine(line);

            file.Close();

            //  MessageBox.Show("IT WORKED WELL.");
        }

    }
}


